#include <stdio.h>

#define MAX_ITEMS 100
#define MAX_WEIGHT 100

int knapsack(int values[], int weights[], int capacity, int n) {
    int dp[MAX_WEIGHT + 1];

    for (int i = 0; i <= capacity; i++) {
        dp[i] = 0;
    }

    for (int i = 1; i <= n; i++) {
        for (int w = capacity; w >= weights[i - 1]; w--) {
            dp[w] = (dp[w] > values[i - 1] + dp[w - weights[i - 1]]) ? dp[w] : values[i - 1] + dp[w - weights[i - 1]];
        }
    }

    return dp[capacity];
}

int main() {
	printf("G.Ajay kumar-192210590\n");
    int values[] = {60, 100, 120};
    int weights[] = {10, 20, 30};
    int capacity = 50;
    int n = sizeof(values) / sizeof(values[0]);

    int optimal_cost = knapsack(values, weights, capacity, n);

    printf("Optimal cost: %d\n", optimal_cost);

    return 0;
}
